import { Markup, Telegraf } from 'telegraf'
import { message } from 'telegraf/filters'

import { Command } from './command.class'
import { IBotContext } from '../context/context.interface'
import { connect2tabulator } from '../db/db.promise'
import {
    getTask,
    takeTask,
    getUserIdByChatId,
    closeTask,
    refuseTask,
    nextTask,
    nextStep,
    addHistory,
    getRootTask,
    updateProject,
    resetProjectTask,
    rebootProject,
    changeAdminActive,
    clearUserStages,
    addUserStage,
    getPackageTask,
    getSubscribersRemote,
} from '../db/db.querys'

interface IMyTask {
    id: number
    assortName: string
    stageName: string
    needTo: number
    made: number
    defect: number
    price: number
    refuse: boolean
}

interface IUsersWithRights {
    [name: string]: {
        isAdmin: boolean,
        isActive: boolean,
        isChange: boolean
        userName: string,
        rights: number[]
    }
}

export class WebAppCommand extends Command {
    constructor(bot: Telegraf<IBotContext>) {
        super(bot)
    }

    handle(): void {
        this.bot.on(message('web_app_data'), async (ctx) => {
            const webAppData = ctx.message.web_app_data
            const pool = await connect2tabulator()

            const startNextTask = async (taskId: number, made: number) => {
                // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∑–∞–¥–∞—á–∏
                const nextResponse = await nextTask(pool, taskId)
                if (nextResponse.status) {
                    if (nextResponse.data) {
                        const nextStepResponse = await nextStep(pool, nextResponse.data, made)
                        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —è–≤–ª—è–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω–æ–π - –Ω—É–∂–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏.
                        if (nextStepResponse.status) {
                            const nextTaskResponse = await getTask(pool, String(nextStepResponse.id))
                            if (nextTaskResponse.status) {
                                const nextTask = nextTaskResponse.data[0]
                                if (nextTask.remote === 1) {
                                    const subscribersResponse = await getSubscribersRemote(pool, nextTask.stageId)
                                    if (subscribersResponse.status) {
                                        const msgText = `–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —É–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - ${nextTask.assortName} (${nextTask.stageName}) –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${nextTask.needTo}, —Ü–µ–Ω–∞ ${nextTask.price}`
                                        for (const subscriber of subscribersResponse.subscribers) {
                                            try {
                                                await ctx.telegram.sendMessage(subscriber.telegramId, msgText)
                                                console.log(`Send subscriber - ${subscriber.userName} msg [${msgText}]`)
                                            } catch (e: any) {
                                                console.log(`Error send subscriber - ${e.message}`)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        const rootTaskResponse = await getRootTask(pool, taskId)
                        if (rootTaskResponse.status) {
                            const rootTask = rootTaskResponse.data
                            const balance = made + rootTask.curBalance
                            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –∞—Ä—Ç–∏–∫—É–ª–∞
                            const updateProjectResponse = await updateProject(pool, rootTask.assortId, balance)
                            if (!updateProjectResponse.status) console.log(`Update project error - ${updateProjectResponse.error}`)
                            // –û–±–Ω—É–ª—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                            const resetProjectTaskResponse = await resetProjectTask(pool, rootTask.assortId)
                            if (!resetProjectTaskResponse.status) console.log(`Reset project tasks error - ${resetProjectTaskResponse.error}`)
                            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
                            if (rootTask.minBalance > balance) {
                                const rebootProjectResponse = await rebootProject(pool, rootTask.assortId, rootTask.stageId, rootTask.minBalance - balance)
                                if (!rebootProjectResponse.status) console.log(`Reboot project error - ${rebootProjectResponse.error}`)
                            }
                        } else {
                            console.log(`Get root task error - ${rootTaskResponse.error}`)
                        }
                    }
                } else {
                    console.log(`Next task error - ${nextResponse.error}`)
                }
            }

            const packageTask = async (made: number) => {
                // –í—ã—è—Å–Ω–∏–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏
                const taskPackageResponse = await getPackageTask(pool)
                if (taskPackageResponse.status) {
                    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
                    const balance = (taskPackageResponse.data.curBalance - made) < 0 ? 0 : taskPackageResponse.data.curBalance - made
                    const updateProjectResponse = await updateProject(pool, taskPackageResponse.data.assortId, balance)
                    if (!updateProjectResponse.status) console.log(`Update project package error - ${updateProjectResponse.error}`)
                    // –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞—á—É –Ω–∏ –∫—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –ø—Ä–æ–µ–∫—Ç
                    if (taskPackageResponse.data.minBalance > balance) {
                        const rebootProjectResponse = await rebootProject(pool, taskPackageResponse.data.assortId, taskPackageResponse.data.stageId, taskPackageResponse.data.minBalance - balance)
                        if (!rebootProjectResponse.status) console.log(`Reboot project package error - ${rebootProjectResponse.error}`)
                    }

                } else {
                    console.log(`Task package error - ${taskPackageResponse.error}`)
                }
            }

            if (webAppData.button_text === '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á') {
                const result: string[] = []
                const userIdResponse = await getUserIdByChatId(pool, ctx.message.chat.id)
                const tasksResponse: { tasks: string[] } = JSON.parse(webAppData.data)
                //if (tasksResponse.task !== '0') tasksResponse.tasksRemote.push(tasksResponse.task)
                for (const taskId of tasksResponse.tasks) {
                    const statusTask = await getTask(pool, taskId)
                    if (statusTask.status && statusTask.data.length) {
                        const task = statusTask.data[0]
                        if (task.status) {
                            result.push(`üî¥ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] - —É–∂–µ –∑–∞–Ω—è—Ç–∞!!!`)
                        } else {
                            const takeTaskResponse = await takeTask(pool, Number(taskId), userIdResponse.id)
                            if (takeTaskResponse.status) {
                                result.push(`üü¢ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] ${task.needTo} —à—Ç. - —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`)
                            } else {
                                result.push(`üî¥ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] - –æ—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!!!`)
                            }
                        }
                    } else {
                        result.push(`üî¥ –ó–∞–¥–∞—á–∞ ${taskId} - –æ—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!!!`)
                    }
                }
                const resultMsg = result.join('\n')
                console.log(`[–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á] userId ${userIdResponse.id}: ${resultMsg}`)
                await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:\n${resultMsg}`, Markup.keyboard([[{ text: '–ù–∞–∑–∞–¥' }]]))
            }

            if (webAppData.button_text === '–ú–æ–∏ –∑–∞–¥–∞—á–∏') {
                const result: string[] = []
                const userIdResponse = await getUserIdByChatId(pool, ctx.message.chat.id)
                const tasksResponse: { tasks: IMyTask[] } = JSON.parse(webAppData.data)
                for (const task of tasksResponse.tasks) {
                    if (!task.id) continue
                    if (task.refuse) {
                        const refuseResponse = await refuseTask(pool, task.id)
                        if (refuseResponse.status) {
                            result.push(`üü¢ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] - —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞`)
                        } else {
                            result.push(`üî¥ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] - –æ—à–∏–±–∫–∞ ${refuseResponse.error}`)
                        }
                        continue
                    }
                    if (task.made > 0 || task.defect > 0) {
                        if ((task.made + task.defect) >= task.needTo) {
                            const closeResponse = await closeTask(pool, task.id, task.made, task.defect)
                            if (closeResponse.status) {
                                result.push(`üü¢ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] - —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ —Å—É–º–º—É ${task.made * task.price}`)
                                const historyResponse = await addHistory(pool, userIdResponse.id, task.assortName, task.stageName, task.made, task.price, task.price * task.made)
                                if (!historyResponse.status) console.log(`Add to history error - ${historyResponse.error}`)
                                // –°—Ç–∞—Ä—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞
                                await startNextTask(task.id, task.made)
                                // –£—á–∏—Ç—ã–≤–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É
                                if (task.stageName.toLowerCase().includes('—É–ø–∞–∫–æ–≤–∞—Ç—å')) {
                                    await packageTask(task.made)
                                }
                            } else {
                                result.push(`üî¥ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] - –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ${closeResponse.error}`)
                            }
                        } else {
                            result.push(`üî¥ –ó–∞–¥–∞—á–∞ ${task.assortName} [${task.stageName}] - —É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`)
                        }
                    }
                }
                const resultMsg = result.join('\n')
                console.log(`[–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á] userId ${userIdResponse.id}: ${resultMsg}`)
                await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:\n${resultMsg}`, Markup.keyboard([[{ text: '–ù–∞–∑–∞–¥' }]]))
            }

            if (webAppData.button_text === '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞') {
                const usersResponse: { users: IUsersWithRights } = JSON.parse(webAppData.data)
                const result = []
                for (const userId in usersResponse.users) {
                    const user = usersResponse.users[userId]
                    if (!user.isChange) continue
                    result.push(user.userName)
                    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –∞–¥–º–∏–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    const isResponse = await changeAdminActive(pool, Number(userId), user.isAdmin, user.isActive)
                    if (!isResponse.status) console.log(`For userId ${userId} error change active - ${isResponse.error}`)
                    const clearResponse = await clearUserStages(pool, Number(userId))
                    if (!clearResponse.status) console.log(`For userId ${userId} error clear roles - ${clearResponse.error}`)
                    for (const stageId of user.rights) {
                        const addResponse = await addUserStage(pool, Number(userId), stageId)
                        if (!addResponse.status) console.log(`For userId ${userId} error add roles - ${addResponse.error}`)
                    }
                }
                if (result.length) await ctx.reply(`–ü—Ä–∞–≤–∞ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n${result.join('\n')}`)
            }
        })
    }
}


